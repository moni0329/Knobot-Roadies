import googlemaps
import os
import sys
import io
import logging
from google.cloud import speech_v1 as speech
import pyaudio
import wave
import pyttsx3
from datetime import datetime
import serial
import time
import RPi.GPIO as GPIO
from PIL import Image
import requests
import pandas as pd
import torch
import numpy as np
from PIL import Image, ImageDraw, ImageFont
import torchvision.transforms as T
import subprocess  # Added to call led.py
import cv2

# Ensure the root of the yolov5 directory is in the Python path
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
from yolov5.models.common import DetectMultiBackend  # YOLO import

# Set up environment variables and API keys
os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = r"/home/hasha/stt_ttsn.json"
GMAPS_API_KEY = 'AIzaSyDU9CC3BO2D0s-COzIY-tBfucEXbBSASIs' 
gmaps_client = googlemaps.Client(key=GMAPS_API_KEY)

# Set up logging
logging.basicConfig(level=logging.DEBUG)

# Initialize text-to-speech engine
tts_engine = pyttsx3.init()
tts_engine.setProperty('rate', 140)  # Set the speech rate to a slower value

# GPIO pin setup for distance check (if needed)
TRIG_PIN_1 = 23
ECHO_PIN_1 = 24
TRIG_PIN_2 = 20  
ECHO_PIN_2 = 21  
SAFE_DISTANCE = 500.0

GPIO.setmode(GPIO.BCM)
GPIO.setup(TRIG_PIN_1, GPIO.OUT)
GPIO.setup(ECHO_PIN_1, GPIO.IN)
GPIO.setup(TRIG_PIN_2, GPIO.OUT)
GPIO.setup(ECHO_PIN_2, GPIO.IN)

# Serial setup for SIM808
ser = serial.Serial('/dev/serial0', baudrate=9600, timeout=1)

# Load YOLOv5 model for object detection
model = DetectMultiBackend('/home/hasha/camera/yolov5/models/crosswalk.pt', device='cpu')
#model = torch.hub.load('ultralytics/yolov5', 'custom', path='/home/hasha/camera/yolov5/models/crosswalk.pt', force_reload=True)

# Function for text-to-speech
def speak(text):
    tts_engine.say(text)
    tts_engine.runAndWait()

# Function to ask for the destination
def ask_destination():
    speak("What is your destination?")
    print("Listening for destination...")  # Print to console for feedback

    text = speech_to_text()

    if text:
        logging.info(f"Recognized text: {text}")
        speak(f"Your destination is: {text}")
        return text
    else:
        logging.error("Could not recognize the destination. Please try again.")
        speak("I'm sorry, I couldn't understand. Please try again.")
        return None

# Function for speech-to-text
def speech_to_text():
    client = speech.SpeechClient()
    filename = record_audio()
    if not filename:
        logging.error("Recording failed")
        return None 

    try:
        with io.open(filename, "rb") as audio_file:
            content = audio_file.read()

        audio = speech.RecognitionAudio(content=content)
        config = speech.RecognitionConfig(
            encoding=speech.RecognitionConfig.AudioEncoding.LINEAR16,
            sample_rate_hertz=16000,
            language_code="en-LK",
            max_alternatives=3  # Allow multiple alternatives for better accuracy
        )

        response = client.recognize(config=config, audio=audio)
        
        if response.results:
            # Log all alternatives and pick the most confident one
            for i, result in enumerate(response.results[0].alternatives):
                logging.info(f"Alternative {i+1}: {result.transcript} (Confidence: {result.confidence})")
            
            # Return the transcript of the top result
            return response.results[0].alternatives[0].transcript
        else:
            logging.error("No speech recognized in audio.")
            return None
    except Exception as e:
        logging.error(f"Speech-to-text error: {e}")
        return None

# Function to record audio
def record_audio():
    chunk = 1024
    sample_format = pyaudio.paInt16
    channels = 1
    fs = 16000
    seconds = 5
    filename = "output.wav"

    p = pyaudio.PyAudio()

    logging.info("Recording")

    stream = p.open(format=sample_format,
                    channels=channels,
                    rate=fs,
                    frames_per_buffer=chunk,
                    input=True,
                    input_device_index=1)

    frames = []
    try:
        for i in range(0, int(fs / chunk * seconds)):
            data = stream.read(chunk)
            frames.append(data)
    except Exception as e:
        logging.error(f"Error during recording: {e}")
    finally:
        stream.stop_stream()
        stream.close()
        p.terminate()

    logging.info("Finished recording")

    wf = wave.open(filename, "wb")
    wf.setnchannels(channels)
    wf.setsampwidth(p.get_sample_size(sample_format))
    wf.setframerate(fs)
    wf.writeframes(b"".join(frames))
    wf.close()

    return filename

# Function to send AT commands to SIM808
def send_at_command(command, delay=1):
    ser.write((command + "\r\n").encode())
    time.sleep(delay)
    response = ser.read_all().decode()
    return response

# Function to get live GPS location using SIM808
def get_live_location():
    send_at_command("AT+CGNSPWR=1")
    print("GPS powered on. Waiting for fix...")

    fix_acquired = False
    attempts = 0
    max_attempts = 100

    while not fix_acquired and attempts < max_attempts:
        gps_data = send_at_command("AT+CGNSINF", delay=2)
        
        if "+CGNSINF: 1,1," in gps_data:
            data = gps_data.split(",")
            latitude = data[3]
            longitude = data[4]
            
            if latitude != "0.000000" and longitude != "0.000000":
                print(f"Latitude: {latitude}, Longitude: {longitude}")
                fix_acquired = True
                send_at_command("AT+CGNSPWR=0")
                return float(latitude), float(longitude)
            else:
                print("No valid GPS fix yet. Retrying...")
        else:
            print("No GPS data available. Retrying...")

        attempts += 1
        time.sleep(2)

    print("Failed to acquire GPS fix after several attempts.")
    send_at_command("AT+CGNSPWR=0")
    return None, None

# Function to get a Google Maps image for the given location
def preview_location_image(latitude, longitude):
    map_url = f"https://maps.googleapis.com/maps/api/staticmap?center={latitude},{longitude}&zoom=20&size=640x640&maptype=satellite&markers=color:red%7Clabel:L%7C{latitude},{longitude}&key={GMAPS_API_KEY}"
    
    try:
        response = requests.get(map_url)
        response.raise_for_status()
        with open("live_location_map.png", "wb") as file:
            file.write(response.content)
        img = Image.open("live_location_map.png")
        img.show()
    except requests.exceptions.RequestException as e:
        logging.error(f"Error fetching map image: {e}")

# Function to detect objects with YOLO on the live location map
def detect_objects_with_yolo_v1(image_path):
    img = Image.open(image_path)
    img = img.resize((640, 640))
    img = img.convert('RGB')
    original_img = np.array(img)
        
    img = np.array(img)
    img = torch.tensor(img).float() / 255.0
    img = img.permute(2, 0, 1).unsqueeze(0)

    results = model(img)
    
        
    if not len(results) > 0:
        print("No crosswalks detected.")
        return
        
    if not isinstance(results, list):
        print("No crosswalks detected.")
        return
    
    detections = results[0] if isinstance(results[0], torch.Tensor) else results
        
    if not len(detections) > 0:
        print("No crosswalks detected.")
        return

    print("Crosswalk Detected")
        
            
           
def detect_objects_with_yolo(image_path):
    # Load and preprocess the image
    img = Image.open(image_path)
    img = img.resize((640, 640))
    img = img.convert('RGB')
    original_img = np.array(img)  # Save a copy of the original image
    
    # Convert image to a tensor
    img = torch.tensor(original_img).float() / 255.0
    img = img.permute(2, 0, 1).unsqueeze(0)  # Shape: [1, 3, 640, 640]
    
    # Run inference
    results = model(img)
    detections = results.pred[0].cpu().numpy()  # Assumes results.pred contains detections
    
    if len(detections) == 0:
        print("No objects detected.")
        return
    
    print("Object detection complete.")
    
    # Define class names (modify based on your dataset)
    class_names = ["crosswalk"]
    
    # Draw bounding boxes on the original image
    image_with_boxes = original_img.copy()
    
    for det in detections:
        print("Detection format:", det)
    
        return
    
    for det in detections:
        x1, y1, x2, y2, conf, cls = det  # Unpack detection
        label = f"{class_names[int(cls)]} {conf:.2f}"
        
        # Draw bounding box
        cv2.rectangle(image_with_boxes, (int(x1), int(y1)), (int(x2), int(y2)), (255, 0, 0), 2)
        
        # Add label
        cv2.putText(image_with_boxes, label, (int(x1), int(y1) - 10),
                    cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 0, 0), 2)
    
    # Display the image
    cv2.imshow("Detections", image_with_boxes)
    cv2.waitKey(0)
    cv2.destroyAllWindows()
            
        
# Function to get directions from the current location to the destination
def get_directions_to_destination(latitude, longitude, destination):
    try:
        directions_result = gmaps_client.directions(
            origin=(latitude, longitude),
            destination=destination,
            mode="walking"
        )

        if directions_result:
            steps = directions_result[0]['legs'][0]['steps']
            print("Starting navigation to your destination.")
            print("-------------------------------------------------------------------\n\n\n")
            for step in steps:
                instruction = step['html_instructions']
                clean_instruction = instruction.replace('<b>', '').replace('</b>', '').replace('<div>', '').replace('</div>', '').replace('<br>', '')
                print(clean_instruction)
                time.sleep(2)
        else:
            print("No directions found.")
            logging.error("No directions found from Google Maps.")
    except Exception as e:
        logging.error(f"Error getting directions: {e}")
        print("An error occurred while retrieving directions.")

def get_directions_to_destination_v1(latitude, longitude, destination, previous_instruction="0"):
    try:
        directions_result = gmaps_client.directions(
            origin=(latitude, longitude),
            destination=destination,
            mode="walking"
        )

        if directions_result:
            steps = directions_result[0]['legs'][0]['steps']
            clean_instruction = ""
            for step in steps:
                instruction = step['html_instructions']
                clean_instruction = instruction.replace('<b>', '').replace('</b>', '').replace('<div>', '').replace('</div>', '').replace('<br>', '')
                if previous_instruction != clean_instruction:
                    print(clean_instruction)
                    speak(clean_instruction)
                    return clean_instruction
                break
                
            return previous_instruction
                
                
        else:
            print("No directions found.")
            logging.error("No directions found from Google Maps.")
    except Exception as e:
        logging.error(f"Error getting directions: {e}")
        print("An error occurred while retrieving directions.")


# Main function
def main():
    destination = ask_destination()
    if destination:
        logging.info(f"User's destination: {destination}")
        subprocess.run(["python3", "/home/hasha/led2.py"])
        latitude, longitude = get_live_location()
        if latitude and longitude:
            logging.info(f"Current GPS location: Latitude = {latitude}, Longitude = {longitude}")
            subprocess.run(["python3", "/home/hasha/led2.py"])  # Run led.py to blink the LED
            preview_location_image(latitude, longitude)
            detect_objects_with_yolo("live_location_map.png")
            get_directions_to_destination(latitude, longitude, destination)
        else:
            logging.error("Failed to get live GPS location.")
    else:
        logging.error("Destination was not provided.")

def test():
    
    destination = "Mihintale"
    latitude, longitude = "8.354307", "80.501727"
    #latitude, longitude = get_live_location()
    
    instruction = get_directions_to_destination_v1(latitude, longitude, destination)
    
    while instruction != "" or instruction != "Destination will be on the left":
        instruction = get_directions_to_destination_v1(latitude, longitude, destination,instruction)
    
if __name__ == "__main__":
    try:
        test()
    except KeyboardInterrupt:
        logging.info("Program stopped by user")
    finally:
        GPIO.cleanup()
